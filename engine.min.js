function test2() {};function randInt(min, max) {return Math.floor( min + Math.random()*(max - min + 1) );};function randFloat(min, max) {return min + Math.random()*(max - min);};function weightedRandom(weightSet) {let sum = 0;let rnd = Math.random();for (let value in weightSet) {sum += weightSet[value];if (rnd <= sum) return parseInt(value);};return parseInt(Object.keys(weightSet)[0]); };function distance(x1,y1, x2,y2) {let dx = x2 - x1;let dy = y2 - y1;return Math.sqrt(dx*dx + dy*dy);};function clamp(value, min, max) {return Math.min(max, Math.max(value, min));};function round(value, precision = 2) {return Math.round(value * Math.pow(10, precision)) / Math.pow(10, precision);};function makeFinite(value) {return Math.fround(value);};function lerp(baseValue, targetValue, amount = 0.9) {return baseValue + (targetValue - baseValue) * amount;};function sin(angle) {return Math.sin(angle * Math.PI / 180);};function cos(angle) {return Math.cos(angle * Math.PI / 180);};function pol(x, y) {return {angle: Math.atan2(y, x) * (180 / Math.PI), length: distance(0,0, x, y)};};function rec(a, l) {return {x: cos(a) * l, y: sin(a) * l};}class Vector {x = 0;y = 0;get length() {if (this.x == 0 && this.y == 0) return 0;return Math.sqrt(this.x**2 + this.y**2);};get angle() {return (Math.atan2(this.y, this.x) * 180) / Math.PI;};constructor(x, y) {if (x == undefined) {this.x = 0;this.y = 0;} else {this.x = x;if (y == undefined) this.y = x;else this.y = y;};};static fromObject(o) {return new Vector(o.x, o.y);};static fromArray(a) {return new Vector(a[0], a[1]);};static fromAngle(angle, length) {return new Vector(cos(angle), sin(angle)).mult(length);};static dot(v1, v2) {return v1.x*v2.x + v1.y*v2.y;};static cross(v1, v2) {return v1.x*v2.y - v1.y*v2.x;};static lerp(v1, v2, amount = 0.9) {return new Vector(lerp(v1.x, v2.x, amount), lerp(v1.y, v2.y, amount));};toArray() {return [this.x, this.y];};toObject() {return {x: this.x, y: this.y};};render(x, y, scale = 1, color = "#00ffff") {ctx.strokeStyle = color;ctx.lineWidth = 2;ctx.beginPath();ctx.moveTo(x, y);ctx.lineTo(x + this.x*scale, y + this.y*scale);ctx.stroke();};copy() {return new Vector(this.x, this.y);};unit(n = 1) {if (n == 0) return new Vector();return new Vector(this.x == 0 ? 0 : (this.x / this.length)*n, this.y == 0 ? 0 : (this.y / this.length)*n);};normal(n = 1) {return new Vector(-this.y, this.x).unit(n);};mult(n) {if (n instanceof Vector) {return new Vector(this.x * n.x, this.y * n.y);} else {return new Vector(this.x * n, this.y * n);};};add(v2) {return new Vector(this.x + v2.x, this.y + v2.y);};sub(v2) {return new Vector(this.x - v2.x, this.y - v2.y);};round(n = 0) {return new Vector(round(this.x, n), round(this.y, n));};}class Camera {#realPos = new Vector();pos = new Vector(); #realZoom = 1;zoom = 1; isFinite = false;rounded = null;get realZoom() {return this.#realZoom;};get realPos() {return this.#realPos;};constructor(pos, zoom = 1) {this.pos = pos;this.#realPos = pos;this.zoom = zoom;this.#realZoom = zoom;};setZoom(zoom, smooth = false) {this.zoom = clamp(zoom, settings.camera.minZoom, settings.camera.maxZoom);if (!smooth) this.#realZoom = this.zoom;};lookAt(pos, smooth = false) {let center = new Vector(c.width / this.#realZoom, c.height / this.#realZoom).mult(0.5);this.pos = pos.sub(center);if (!smooth) this.#realPos = this.pos;};update() {this.#realPos = Vector.lerp(this.#realPos, this.pos, settings.camera.slideSpeed);this.#realZoom = lerp(this.#realZoom, this.zoom, settings.camera.zoomSpeed);if (this.isFinite) {this.#realPos = new Vector(makeFinite(this.#realPos.x), makeFinite(this.#realPos.y) );this.#realZoom = makeFinite(this.#realZoom);};if (this.rounded != null) {this.#realPos = this.#realPos.round(this.rounded);};this.#realZoom = clamp(this.#realZoom, settings.camera.minZoom, settings.camera.maxZoom);};renderTexture(textureInstance, x, y, width, height, rotation = 0, margin = 0) {textureInstance.render(...this.worldToCamXY(x, y), ...this.worldToCamSizeXY(width, height), rotation = rotation, margin = margin)};render() {ctx.strokeStyle = "red";ctx.lineWidth = 1;ctx.beginPath();ctx.rect(... this.#realPos.toArray(), c.width * this.#realZoom, c.height * this.#realZoom);ctx.stroke();};worldToCamSize(v) {return v.mult(this.#realZoom);};get worldToScreenSize() { return this.worldToCamSize.bind(this); };get w2cs() { return this.worldToCamSize.bind(this); };worldToCamSizeXY(width, height) {return [width * this.#realZoom, height * this.#realZoom];};get worldToScreenSizeXY() { return this.worldToCamSizeXY.bind(this); };get w2csXY() { return this.worldToCamSizeXY.bind(this); };worldToCamSizeX(width) {return width * this.#realZoom;};get worldToScreenSizeX() { return this.worldToCamSizeX.bind(this); };get w2csX() { return this.worldToCamSizeX.bind(this); };worldToCamSizeY(height) {return height * this.#realZoom;};get worldToScreenSizeY() { return this.worldToCamSizeY.bind(this); };get w2csY() { return this.worldToCamSizeY.bind(this); };worldToCam(v) {return v.sub(this.#realPos).mult(this.#realZoom);};get worldToScreen() { return this.worldToCam.bind(this); };get w2c() { return this.worldToCam.bind(this); };worldToCamXY(x, y) {return [(x - this.#realPos.x) * this.#realZoom, (y - this.#realPos.y) * this.#realZoom];};get worldToScreenXY() { return this.worldToCamXY.bind(this); };get w2cXY() { return this.worldToCamXY.bind(this); };worldToCamX(x) {return (x - this.#realPos.x) * this.#realZoom;};get worldToScreenX() { return this.worldToCamX.bind(this); };get w2cX() { return this.worldToCamX.bind(this); };worldToCamY(y) {return (y - this.#realPos.y) * this.#realZoom;};get worldToScreenY() { return this.worldToCamY.bind(this); };get w2cY() { return this.worldToCamY.bind(this); };camToWorldSize(v) {return v.mult(1 / this.#realZoom);};get screenToWorldSize() { return this.camToWorldSize.bind(this); };get c2ws() { return this.camToWorldSize.bind(this); };camToWorldSizeXY(width, height) {return [width / this.#realZoom, height / this.#realZoom];};get screenToWorldSizeXY() { return this.camToWorldSizeXY.bind(this); };get c2wsXY() { return this.camToWorldSizeXY.bind(this); };camToWorldSizeX(width) {return width / this.#realZoom;};get screenToWorldSizeX() { return this.camToWorldSizeX.bind(this); };get c2wsX() { return this.camToWorldSizeX.bind(this); };camToWorldSizeY(height) {return height / this.#realZoom;};get screenToWorldSizeY() { return this.camToWorldSizeY.bind(this); };get c2wsY() { return this.camToWorldSizeY.bind(this); };camToWorld(v) {return v.add(this.#realPos).mult(1 / this.#realZoom);};get screenToWorld() { return this.camToWorld.bind(this); };get c2w() { return this.camToWorld.bind(this); };camToWorldXY(x, y) {return [(x + this.#realPos.x) / this.#realZoom, (y + this.#realPos.y) / this.#realZoom];};get screenToWorldXY() { return this.camToWorldXY.bind(this); };get c2wXY() { return this.camToWorldXY.bind(this); };camToWorldX(x) {return (x + this.#realPos.x) / this.#realZoom;};get screenToWorldX() { return this.camToWorldX.bind(this); };get c2wX() { return this.camToWorldX.bind(this); };camToWorldY(y) {return (y + this.#realPos.y) / this.#realZoom;};get screenToWorldY() { return this.camToWorldY.bind(this); };get c2wY() { return this.camToWorldY.bind(this); };}function canvasFillScreen() {c.width = c.offsetWidth;c.height = c.offsetHeight;c.size = new Vector(c.width, c.height);c.center = c.size.mult(0.5);};function pushNotification(message, delay = 1 + message.length * 0.08, type = "normal") {let container = document.getElementById("notContainer");if (container == null) {container = document.createElement("div");container.id = "notContainer";document.body.appendChild(container);};if (container.children.length >= settings.maxNotificationCount) {let childIndex = 0;container.children[childIndex].remove();};let newNot = document.createElement("div");newNot.classList.add("notification");newNot.classList.add(type);newNot.onanimationend = function (e) {if (e.animationName == "pop-in") {e.target.style.animationName = "pop-out";e.target.style.animationDelay = delay + "s";};if (e.animationName == "pop-out") {e.target.remove();};};let newP = document.createElement("p");newP.textContent = message;newNot.appendChild(newP);container.appendChild(newNot);};function setClass(element, calssName, state) {if (!element) return;if (element.classList.contains(calssName) != state) element.classList.toggle(calssName);};function buildDebugMenu() {let container = document.getElementById("debug");if (container != null) return;container = document.createElement("div");container.id = "debug";container.innerHTML = `<pre id="fps">FPS: ---</pre><pre id="text"></pre>`;document.body.appendChild(container);};function addDebugOption(id, title, type, defaultValue, value) {let container = document.getElementById("debug");let newOptionContainer = document.createElement("div");newOptionContainer.classList.add("item");newOptionContainer.innerHTML = `<label>${title}</label>`;switch (type) {case "bool":newOptionContainer.innerHTML += `<input id="${id}" type="checkbox"${defaultValue ? " checked" : ""}>`;break;case "range":newOptionContainer.innerHTML += `<input id="${id}" type="range" value="${defaultValue}" min="${value?.min}" max="${value?.max}" step="${value?.step}">`;break;case "number":newOptionContainer.innerHTML += `<input id="${id}" type="number" value="${defaultValue}">`;break;case "text":newOptionContainer.innerHTML += `<input id="${id}" type="text">`;break;case "list":let selectElement = `<select id="${id}">`;for (let key in value) {console.log(key, newOptionContainer.innerHTML);selectElement += `<option value="${key}"${defaultValue == key ? " selected" : ""}>${value[key]}</option>`;};selectElement += `</select>`;newOptionContainer.innerHTML += selectElement;break;};container.appendChild(newOptionContainer);settings.debug[id] = defaultValue;}class BaseResource {resourceId = "";uid = "";disabled = false;constructor(resourceId) {this.resourceId = resourceId;this.uid = Resource.generateResourceUID(resourceId);};update() {};render() {};destroy() {this.disabled = true;};};class Object2D {pos = new Vector();size = new Vector();disabled = false;constructor(position = new Vector(0, 0), size = new Vector(1, 1)) {this.pos = position;this.size = size;};setCenter(position) {this.pos = position.sub(this.centerOffset);};get left() {return Math.min(this.pos.x, this.pos.x + this.size.x);};get right() {return Math.max(this.pos.x, this.pos.x + this.size.x);};get top() {return Math.min(this.pos.y, this.pos.y + this.size.y);};get bottom() {return Math.max(this.pos.y, this.pos.y + this.size.y);};get center() {return this.pos.add(this.size.mult(0.5));};get centerOffset() {return this.size.mult(0.5);};update() {};render() {};destroy() {this.disabled = true;};};class PhysicsObject2D extends Object2D {vel = new Vector();constructor(position, size) {super(position, size);this.vel = new Vector(0, 0);};update() {this.pos = this.pos.add(this.vel);this.vel = this.vel.mult(0.99);};render() {};destroy() {this.disabled = true;};}class Label2D extends Object2D {color = "#dddddd";fontFamily = "monospace";fontSize = 16;#textcontent = "";maxWidth = Infinity;set text(text) {this.#textcontent = text;this.#updateSize();};constructor(text, position, color = "#dddddd") {super(position);this.text = text;this.color = color;};get text() {return this.#textcontent;};setFont(fontFamily, fontSize = this.fontSize) {this.fontFamily = fontFamily;this.fontSize = fontSize;this.#updateSize();};setSize(fontSize) {this.fontSize = fontSize;this.#updateSize();};#updateSize() {let oldFontSize = parseInt(ctx.font, 10);let oldFontFamily = ctx.font.split(' ').slice(1).join(' ');ctx.font = `${this.fontSize}px ${this.fontFamily}`;this.size.x = ctx.measureText(this.#textcontent).width;this.size.y = this.fontSize;ctx.font = `${oldFontSize}px ${oldFontFamily}`;};render() {ctx.font = `${camera.w2csX(this.fontSize)}px ${this.fontFamily}`;ctx.fillStyle = this.color;ctx.fillText(this.text, ...camera.w2cXY(this.left, this.bottom));if (settings.debug?.boxes) {ctx.strokeStyle = this.color;ctx.beginPath();ctx.strokeRect(this.pos.x, this.pos.y, this.size.x, this.size.y);};};}let input = {mouse: {x: 0,y: 0,prevX: 0,prevY: 0,motionX: 0,motionY: 0,down: false,oldDown: false,right: false,oldRight: false,middle: false,oldMiddle: false,},keys: {justPressed: [],pressed: [],},sensor: {acceleration: {x: 0,y: 0,z: 0,},},controls: {debug: "F2", },};window.onkeydown = function (e) {if (!input.keys.pressed.includes(e.key)) {input.keys.pressed.unshift(e.key);};if (!e.repeat) input.keys.justPressed.unshift(e.key);};window.onkeyup = function (e) {input.keys.pressed = input.keys.pressed.filter( a => a != e.key && a != e.key.toLowerCase() && a != e.key.toUpperCase());};window.onmousedown = function (e) {if (document.getElementById("debug")?.contains(e.target)) return;_updateMousePosition(e);if (e.button == 0) input.mouse.down = true;if (e.button == 1) input.mouse.middle = true;if (e.button == 2) input.mouse.right = true;};window.onmouseup = function (e) {_updateMousePosition(e);if (e.button == 0) input.mouse.down = false;if (e.button == 1) input.mouse.middle = false;if (e.button == 2) input.mouse.right = false;};window.onmousemove = function (e) {_updateMousePosition(e);};window.onwheel = function (e) {_updateMousePosition(e);camera.targetZoom = clamp(camera.targetZoom - Math.sign(e.deltaY)*0.05, settings.camera.minZoom, settings.camera.maxZoom);};window.onblur = _inputLost;window.onfocus = _inputLost;window.onmouseleave = _inputLost;function _inputLost() {input.mouse.x = 0;input.mouse.y = 0;input.mouse.down = false;input.mouse.right = false;input.keys.pressed = [];input.keys.justPressed = [];};function _updateMousePosition(e) {input.mouse.x = ((e.clientX - c.offsetLeft) / c.offsetWidth) * c.width;input.mouse.y = ((e.clientY - c.offsetTop) / c.offsetHeight) * c.height;};function updateInputs() {input.keys.justPressed = [];input.mouse.motionX =  input.mouse.x - input.mouse.prevX;input.mouse.motionY =  input.mouse.y - input.mouse.prevY;input.mouse.prevX = input.mouse.x;input.mouse.prevY = input.mouse.y;input.mouse.oldDown = input.mouse.down;input.mouse.oldRight = input.mouse.right;input.mouse.oldMiddle = input.mouse.middle;};function _testKeyId(filterString, array) {let parsedString = _parseFilterString(filterString);let pressed = false;parsedString.every(and => {pressed = and.every(key => {return array.includes(key);});return !pressed;});return pressed;};function _parseFilterString(filterString) {let out = [];let isEscape = false;let currentKey = "";let keys = [];for (let i = 0; i < filterString.length; i++) {if (isEscape) {currentKey += filterString[i];isEscape = false;continue;};if (filterString[i] == "\\") {isEscape = true;continue;};if (filterString[i] == " ") continue;if (filterString[i] == "+") {keys.push(currentKey);currentKey = "";continue;};if (filterString[i] == ",") {keys.push(currentKey);out.push(keys);keys = [];currentKey = "";continue;};currentKey += filterString[i];};if (currentKey != "") {keys.push(currentKey);out.push(keys);};return out;};function setKeybind(bindName, boundKeys) {input.controls[bindName] = boundKeys;};function removeKeybind(bindName) {if (bindName in input.controls) return;delete input.controls[bindName];};function isKeyPressed(bindName) {if (!(bindName in input.controls)) {console.error(`Unknown keybind '${bindName}'`);return false;};return _testKeyId(input.controls[bindName], input.keys.pressed);};function isKeyJustPressed(bindName) {if (!(bindName in input.controls)) {console.error(`Unknown keybind '${bindName}'`);return false;};return _testKeyId(input.controls[bindName], input.keys.justPressed);}let c = document.getElementById("maincv");c.isPixelPerfect = c.classList.contains("pixel-perfect");let ctx = c.getContext("2d");window.onresize = canvasFillScreen;canvasFillScreen();buildDebugMenu();let time = {elapsed: 0, _frames: 0, delta: 0, buffer: [], bufferSize: 10, measureFrame: 0,measureDelta: 0,};let settings = {maxNotificationCount: 5,enableAudio: true,camera: {minZoom: 0.25,maxZoom: 4,zoomSpeed: 1, slideSpeed: 0.5, },debug: {fpsUpdateInterval: 1000, },};let frameCounter = 0;let camera = new Camera(new Vector());let _bodyLoaded = false;function _mainLoop() {frameCounter++;time._frames++;time.elapsed = performance.now();time.delta = time.elapsed - time.measureDelta;Resource.update();document.getElementById("text").textContent = "";if (typeof(update) === typeof(Function)) update();if (typeof(render) === typeof(Function)) render();if (isKeyJustPressed("debug")) {document.getElementById("debug").classList.toggle("hidden");};document.getElementById("text").textContent += "Pressed: " + input.keys.pressed + "\n";document.getElementById("text").textContent += "J. pre.: " + input.keys.justPressed + "\n";updateInputs();time.measureDelta = time.elapsed;if (time.elapsed - time.measureFrame >= settings.debug.fpsUpdateInterval) {let currentFps = makeFinite(time._frames * (1000 / settings.debug.fpsUpdateInterval));time.buffer.push(currentFps);if (time.buffer.length > time.bufferSize) time.buffer.unshift();time.fps = Math.round(time.buffer.reduce((a, b) => (a + b)) / time.buffer.length);document.getElementById("fps").textContent = "FPS: " + time.fps;time.measureFrame = time.elapsed;time._frames = 0;};for (let c of document.getElementById("debug").children) {if (!c.classList.contains("item")) continue;let inputElement = c.querySelector("input,option[selected='']");switch (inputElement.getAttribute("type")) {case "checkbox":settings.debug[inputElement.getAttribute("id")] = inputElement.checked;break;case "range":case "number":settings.debug[inputElement.getAttribute("id")] = parseFloat(inputElement.value);break;default:settings.debug[inputElement.getAttribute("id")] = inputElement.value;break;};};requestAnimationFrame(_mainLoop);};document.body.onload = function (e) {_bodyLoaded = true;_start();};function _start() {if (!_bodyLoaded) return;if ((Resource.maxLoadables - Resource.loaded) != 0) return;if (frameCounter != 0) return;if (typeof(init) === typeof(Function)) init();_mainLoop();}class Particle {pos = new Vector();vel = new Vector();airResistance = 0.99;colorStart = "#ff0000";color = "#ffffff";colorEnd = "#00ff00";sizeStart = 5;size = 0;sizeEnd = 1;age = 0;maxAge = 200;lifeProgress = 0;disabled = false;constructor(x, y, vx, vy, maxAge) {this.pos.x = x;this.pos.y = y;this.vel.x = vx;this.vel.y = vy;this.maxAge = maxAge ?? this.maxAge;this.disabled = false;objects.particles.push(this);};die() {};#updateEssentials() {if (this.maxAge > 0) this.age++;this.lifeProgress = this.age / this.maxAge;let sizeDiff = this.sizeEnd - this.sizeStart;this.size = this.sizeStart + sizeDiff * this.lifeProgress;this.color = this.colorStart.replace(")", `,${1 - this.lifeProgress})`);if (this.maxAge > 0 &&this.age > this.maxAge) {if (!this.disabled) this.die();this.disabled = true;};};update() {this.#updateEssentials();this.pos = this.pos.add(this.vel);this.vel.mult(this.airResistance);};render() {let camPos = cameraTransform(this.pos);ctx.fillStyle = this.color;ctx.beginPath();ctx.arc(camPos.x, camPos.y, this.size*camera.zoom, 0,Math.PI*2);ctx.fill();};}class Path {points = [];agents = [];finishedAgents = [];constructor(pointList = []) {this.points = pointList;};get startPoint() {if (this.points.length == 0) return null;return this.points[0];};get endPoint() {if (this.points.length == 0) return null;return this.points[this.points.length - 1];};addAgent(agent) {if (!(agent instanceof PathFollow)) throw Error("The agent must be an instance of 'PathFollow' !");agent.setPath(this);this.agents.push(agent);};addPointAtEnd(point) {if (!(point instanceof Vector)) throw Error("The point must be an instance of 'Vector' !");this.points.push(point);};addPointAtStart(point) {if (!(point instanceof Vector)) throw Error("The point must be an instance of 'Vector' !");this.points.unshift(point);};removePointFromStart() {this.points = this.points.filter((p, index) => index != 0);};removePointFromEnd() {this.points = this.points.filter((p, index) => index != this.points.length - 1);};getPoint(index) {if (index < 0 || index > this.points.length-1) return null;return this.points[index];};isValidPointIndex(pointIndex) {return pointIndex > 0 && pointIndex < this.points.length;};isFirstPointIndex(pointIndex) {return pointIndex == 0;};isLastPointIndex(pointIndex) {return pointIndex == this.points.length - 1;};addToFinished(agent) {if (!(agent instanceof PathFollow)) throw Error("The agent must be an instance of 'PathFollow' !");this.finishedAgents.push(agent);};removeFromFinished(agent) {if (!(agent instanceof PathFollow)) throw Error("The agent must be an instance of 'PathFollow' !");this.finishedAgents = this.finishedAgents.filter(a => a !== agent);};clearFinishedAgents() {this.finishedAgents = this.finishedAgents.filter(a => a.finished);};removeAgent(agent) {if (!(agent instanceof PathFollow)) throw Error("The agent must be an instance of 'PathFollow' !");this.agents = this.agents.filter(a => a !== agent);};disconnectAgent(agent) {if (!(agent instanceof PathFollow)) throw Error("The agent must be an instance of 'PathFollow' !");agent.path = undefined;this.agents = this.agents.filter(a => a !== agent);};update() {this.agents.forEach(a => {a.update();});};render() {this.points.forEach((p, index) => {ctx.fillStyle = "#ffff00";ctx.beginPath();ctx.arc(...camera.w2cXY(p.x, p.y), camera.c2wsX(15), 0, Math.PI * 2);ctx.fill();});ctx.strokeStyle = "#ffff00";ctx.lineWidth = camera.c2wsX(10);ctx.beginPath();this.points.forEach((p, index) => {if (index == 0) ctx.moveTo(...camera.w2cXY(p.x, p.y));else ctx.lineTo(...camera.w2cXY(p.x, p.y));});ctx.stroke();};};class PathConnection {inputs = [];outputs = [];selectedInput = 0;selectedOutput = 0;inputMode = "all";outputMode = "cycle";constructor(inputMode = "all", outputMode = "cycle", inputPaths = [], outputPaths = []) {this.inputMode = inputMode;this.outputMode = outputMode;this.inputs = inputPaths;this.outputs = outputPaths;};get inputBuffer() {let inputAgents = [];this.inputs.forEach(input => {inputAgents = inputAgents.concat( input.finishedAgents );});return inputAgents;};addInputPath(inputPath) {if (!(inputPath instanceof Path)) throw Error("The input must be an instance of 'Path' !");this.inputs.push(inputPath);};addOutputPath(outputPath) {if (!(outputPath instanceof Path)) throw Error("The output must be an instance of 'Path' !");this.outputs.push(outputPath);};removeInputPath(inputPath) {this.inputs = this.inputs.filter(p => p != inputPath);if (this.selectedInput > this.inputs.length - 1) this.selectedInput = this.inputs.length - 1;};removeOutputPath(inputPath) {this.outputs = this.outputs.filter(p => p != inputPath);if (this.selectedOutput > this.outputs.length - 1) this.selectedOutput = this.outputs.length - 1;};selectInput(path) {if (!(path instanceof Path)) throw Error("The path must be an instance of 'Path' !");let inputSelectedIndex = this.inputs.indexOf(path);if (inputSelectedIndex < 0 || inputSelectedIndex > this.inputs.length - 1) return false;this.selectedInput = inputSelectedIndex;return true;};selectInputByIndex(index) {if (index < 0 || index > this.inputs.length - 1) return false;this.selectedInput = index;return true;};selectOutput(path) {if (!(path instanceof Path)) throw Error("The path must be an instance of 'Path' !");let outputSelectedIndex = this.outputs.indexOf(path);if (outputSelectedIndex < 0 || outputSelectedIndex > this.outputs.length - 1) return false;this.selectedOutput = outputSelectedIndex;return true;};selectInputByIndex(index) {if (index < 0 || index > this.outputs.length - 1) return false;this.selectedOutput = index;return true;};#cycleInput() {this.selectedInput = (this.selectedInput+1) % this.inputs.length;};#cycleOutput() {this.selectedOutput = (this.selectedOutput+1) % this.outputs.length;};update() {if (this.inputs.length == 0) return;let inputAgents = [];if (this.inputMode == "all") {this.inputs.forEach(input => {inputAgents = inputAgents.concat( input.finishedAgents );});};if (this.inputMode == "cycle") {inputAgents = inputAgents.concat( this.inputs[this.selectedInput].finishedAgents );this.#cycleInput();};if (this.inputMode == "cycleSingle") {inputAgents = inputAgents.concat( this.inputs[this.selectedInput].finishedAgents[0] ?? [] );this.#cycleInput();};if (this.inputMode == "cycleSmart") {let currentInputAgents = this.inputs[this.selectedInput].finishedAgents;if (currentInputAgents.length > 0) {inputAgents = inputAgents.concat( currentInputAgents );} else {this.#cycleInput();};};if (this.inputMode == "cycleSingleSmart") {let currentInputAgents = this.inputs[this.selectedInput].finishedAgents;if (currentInputAgents.length > 0) {inputAgents = inputAgents.concat( currentInputAgents[0] );} else {this.#cycleInput();};};if (this.inputMode == "max") {let numberedInputs = this.inputs.map(function (inputPath, index) {return {"bufferSize": inputPath.finishedAgents.length, "index": index}} );numberedInputs.sort((a, b) => b.bufferSize - a.bufferSize);this.selectedInput = numberedInputs[0].index;inputAgents = inputAgents.concat( this.inputs[this.selectedInput].finishedAgents );};if (this.inputMode == "maxSingle") {let numberedInputs = this.inputs.map(function (inputPath, index) {return {"bufferSize": inputPath.finishedAgents.length, "index": index}} );numberedInputs.sort((a, b) => b.bufferSize - a.bufferSize);this.selectedInput = numberedInputs[0].index;inputAgents = inputAgents.concat( this.inputs[this.selectedInput].finishedAgents[0] ?? [] );};if (this.inputMode == "maxSingleSmart") {let currentInputAgents = this.inputs[this.selectedInput].finishedAgents;if (currentInputAgents.length > 0) {inputAgents = inputAgents.concat( currentInputAgents[0] );} else {let numberedInputs = this.inputs.map(function (inputPath, index) {return {"bufferSize": inputPath.finishedAgents.length, "index": index}} );numberedInputs.sort((a, b) => b.bufferSize - a.bufferSize);this.selectedInput = numberedInputs[0].index;};};if (this.inputMode == "min") {let numberedInputs = this.inputs.map(function (inputPath, index) {return {"bufferSize": inputPath.finishedAgents.length, "index": index}} );numberedInputs = numberedInputs.filter(a => a.bufferSize > 0);if (numberedInputs.length == 0) return;numberedInputs.sort((a, b) => a.bufferSize - b.bufferSize);this.selectedInput = numberedInputs[0].index;inputAgents = inputAgents.concat( this.inputs[this.selectedInput].finishedAgents );};if (this.inputMode == "minSingle") {let numberedInputs = this.inputs.map(function (inputPath, index) {return {"bufferSize": inputPath.finishedAgents.length, "index": index}} );numberedInputs = numberedInputs.filter(a => a.bufferSize > 0);if (numberedInputs.length == 0) return;numberedInputs.sort((a, b) => a.bufferSize - b.bufferSize);this.selectedInput = numberedInputs[0].index;inputAgents = inputAgents.concat( this.inputs[this.selectedInput].finishedAgents[0] ?? [] );};if (this.inputMode == "minSingleSmart") {let currentInputAgents = this.inputs[this.selectedInput].finishedAgents;if (currentInputAgents.length > 0) {inputAgents = inputAgents.concat( currentInputAgents[0] );} else {let numberedInputs = this.inputs.map(function (inputPath, index) {return {"bufferSize": inputPath.finishedAgents.length, "index": index}} );numberedInputs = numberedInputs.filter(a => a.bufferSize > 0);if (numberedInputs.length == 0) return;numberedInputs.sort((a, b) => a.bufferSize - b.bufferSize);this.selectedInput = numberedInputs[0].index;};};if (this.inputMode == "random") {this.selectedInput = randInt(0, this.inputs.length - 1);inputAgents = inputAgents.concat( this.inputs[this.selectedInput].finishedAgents );};if (this.inputMode == "randomSingle") {this.selectedInput = randInt(0, this.inputs.length - 1);inputAgents = inputAgents.concat( this.inputs[this.selectedInput].finishedAgents[0] ?? [] );};if (this.outputMode == "delete") {inputAgents.forEach((agent, index) => {agent.path.removeFromFinished(agent);agent.disabled = true;});};if (this.outputs.length == 0) return;if (this.outputMode == "cycle") {inputAgents.forEach((agent, index) => {agent.path.removeFromFinished(agent); this.outputs[this.selectedOutput].addAgent(agent); this.#cycleOutput();});};if (this.outputMode == "cycleSingle" && inputAgents.length > 0) {inputAgents[0].path.removeFromFinished(inputAgents[0]);this.outputs[this.selectedOutput].addAgent(inputAgents[0]);this.#cycleOutput();};if (this.outputMode == "random") {inputAgents.forEach((agent, index) => {this.selectedOutput = randInt(0, this.outputs.length - 1);agent.path.removeFromFinished(agent); this.outputs[this.selectedOutput].addAgent(agent); });};if (this.outputMode == "randomSingle" && inputAgents.length > 0) {let agentIndex = randInt(0, inputAgents.length - 1);this.selectedOutput = randInt(0, this.outputs.length - 1);inputAgents[agentIndex].path.removeFromFinished(inputAgents[agentIndex]); this.outputs[this.selectedOutput].addAgent(inputAgents[agentIndex]); };};render() {ctx.fillStyle = "#ff000088";ctx.beginPath();ctx.arc(this.pos?.x ?? 100, this.pos?.y ?? 100, 8, 0, Math.PI * 2);ctx.fill();if (this.inputs.length == 0) return;let endPoint = this.inputs[this.selectedInput].endPoint;ctx.fillStyle = "#00ddff88";ctx.beginPath();ctx.arc(endPoint.x, endPoint.y, 10, 0, Math.PI * 2);ctx.fill();};};class PathFollow {pos = new Vector();speed = 5;color = "#00ff00";path;lastPointIndex = 0;following = false;finished = false;disabled = false;canFinish = true;constructor(speed = 5, color = "#00ff00") {this.pos = new Vector(0, 0);this.speed = speed;this.color = color;this.following = false;this.finished = false;};setPath(path, startMode = "restart") {if (!(path instanceof Path)) throw Error("The path must be an instance of 'Path' !");this.path = path;this.following = false;if (startMode == "restart") this.startPath();if (startMode == "closest") {let closestpointOnPath = this.path.getClosestPoint(this.pos);if (closestpointOnPath == null) return;this.pos = closestpointOnPath;this.following = true;this.finished = false;this.lastPointIndex = 0;};};startPath() {let startingPoint = this.path.startPoint;if (startingPoint == null) return;this.pos = startingPoint.copy();this.lastPointIndex = 0;this.following = true;this.finished = false;};update() {if (!this.following) return;let jumpSuccesful = false;let currentSpeed = this.speed;while (!jumpSuccesful) {if (this.path.isLastPointIndex(this.lastPointIndex)) break;let nextPoint = this.path.getPoint(this.lastPointIndex + 1);let diffVec = nextPoint.sub(this.pos);let distToPoint = diffVec.length;let targetVector = diffVec.unit(Math.min(currentSpeed, distToPoint));this.pos = this.pos.add(targetVector);if (distToPoint < currentSpeed) {jumpSuccesful = false;currentSpeed = currentSpeed - distToPoint;} else {jumpSuccesful = true;};if (distToPoint <= currentSpeed || !jumpSuccesful) this.lastPointIndex += 1;if (this.path.isLastPointIndex(this.lastPointIndex) && this.canFinish) {this.following = false;this.finished = true;this.path.addToFinished(this);};};};render() {ctx.fillStyle = this.following ? this.color : "#ff000088";ctx.beginPath();ctx.arc(this.pos.x, this.pos.y, this.following ? 20 : 3, 0, Math.PI * 2);ctx.fill();};}const _pidData = {};function resetPid() {_pidData = {};};function clearPid(id = "0000") {if (id in _pidData) delete _pidData[id];};function pid(id = "0000", target, current, P, I, D) {if (!(id in _pidData)) {_pidData[id] = {error: 0,errorSum: 0,errorRate: 0,lastError: 0,};};_pidData[id].error = target - current;_pidData[id].errorSum += _pidData[id].error;_pidData[id].errorRate = _pidData[id].error - _pidData[id].lastError;_pidData[id].lastError = _pidData[id].error;return P*_pidData[id].error + I*_pidData[id].errorSum + D*_pidData[id].errorRate;};function pidPoint(id, targetPoint, currentPoint, P,I,D) {return new Vector(pid(id+"px", targetPoint.x, currentPoint.x, P,I,D),pid(id+"py", targetPoint.y, currentPoint.y, P,I,D),);}const _audioCtx = new AudioContext();class Resource {static maxLoadables = 0;static loaded = 0;static textures = {};static sounds = {};static files = {};static _parallelCache = {};static _globalResourceId = 0;static generateResourceUID(resourceId) {Resource._globalResourceId += 1;return resourceId + "_" + Resource._globalResourceId + String(Math.random()).substring(2);};static loadTexture(path, name, cropData, animData) {Resource.maxLoadables++;let newImage = document.createElement("img");newImage.src = path;Resource.textures[name] = {image: newImage,};if (cropData != undefined) {Resource.textures[name].cropData = {x: cropData[0],y: cropData[1],width: cropData[2],height: cropData[3],};};if (animData != undefined) {Resource.textures[name].animData = {length: animData[0], frameLength: animData[1], mode: animData[2] ?? "loop", wrap: animData[3] ?? 0, direction: animData[4] ?? 1,currentFrame: 0,lastUpdate: 0,playing: true,callback: null,};if (Resource.textures[name].animData.direction < 0) Resource.textures[name].animData.currentFrame = Resource.textures[name].animData.length - 1;};};static loadTileMap(texture_path, bitmap_path, name, mapData = [1,1, 16,16]) {console.log("Settings:", settings);let bitmapName = `${name}_bitmap`;Resource.loadTexture(bitmap_path, bitmapName);Resource.loadTexture(texture_path, name);Resource.textures[name].mapData = {width: mapData[0],height: mapData[1],tileWidth: mapData[2],tileHeight: mapData[3],bitmapName: bitmapName,tiles: [],};};static loadSound(path, name, playData) {Resource.maxLoadables++;let newAudio = new Audio();newAudio.src = path;Resource.sounds[name] = {audio: new Audio(path),};Resource.sounds[name].playData = {duration: null,loopCount: 0,volume: 100,currentLoop: 0,track: _audioCtx.createMediaElementSource(Resource.sounds[name].audio),gain: _audioCtx.createGain(),};Resource.sounds[name].playData.track.connect(Resource.sounds[name].playData.gain).connect(_audioCtx.destination);if (playData != undefined) {Resource.sounds[name].playData = {volume: playData[0] ?? 100,loopCount: playData[1] ?? 0,};};};static loadFile(path, name) {Resource.maxLoadables++;Resource.files[name] = {data: null,metaData: {path: path,},};};static getTexture(textureId) {if (!(textureId in Resource.textures)) throw Error(`(${textureId}) Texture not found!`);return Resource.textures[textureId];};static getSound(soundId) {if (!(soundId in Resource.sounds)) throw Error(`(${soundId}) Sound not found!`);return Resource.sounds[soundId];};static getFile(fileId) {if (!(fileId in Resource.files)) throw Error(`(${fileId}) File not found!`);return Resource.files[fileId];};static getResourceInstance(resourceId) {if (!(resourceId in Resource._parallelCache)) throw Error(`(${fileId}) Resource not found!`);return Resource._parallelCache[resourceId];};static onTextureLoad(name) {Resource.loaded++;console.log(`Texture: %c${name}%c is loaded, total: ${Resource.loaded} / ${Resource.maxLoadables}`,"font-weight: bold; color: #0df", "font-weight: normal");if (Resource.loaded >= Resource.maxLoadables) Resource._loadingDone();};static onSoundLoad(name) {Resource.loaded++;console.log(`Sound: %c${name}%c is loaded, total: ${Resource.loaded} / ${Resource.maxLoadables}`,"font-weight: bold; color: #f0d", "font-weight: normal");if (Resource.loaded >= Resource.maxLoadables) Resource._loadingDone();};static async onFileLoad(name, blob) {Resource.files[name].blob = blob;Resource.files[name].metaData.size = blob.size;Resource.files[name].metaData.type = blob.type;Resource.loaded++;console.log(`File: %c${name}%c is loaded, total: ${Resource.loaded} / ${Resource.maxLoadables}`,"font-weight: bold; color: #fd0", "font-weight: normal");if (Resource.loaded >= Resource.maxLoadables) Resource._loadingDone();};static _loadingDone() {console.groupEnd();console.log(`%cAll resources loaded, starting the main loop!`, "font-weight: bold; color: #fff;");if (_audioCtx.state === "suspended") _audioCtx.resume();_start();};static startLoading() {console.groupCollapsed(`Loading %c${Resource.maxLoadables}%c resources... (%c${Object.keys(Resource.textures).length}%c ${Object.keys(Resource.sounds).length}%c ${Object.keys(Resource.files).length}%c)`,"font-weight: bold; color: #fff;", "", "color: #0df", "color: #f0d", "color: #fd0", "");for (let name in Resource.files) {fetch(Resource.files[name].metaData.path).then((response) => response.blob()).then((blob) => Resource.onFileLoad(name, blob));};for (let name in Resource.textures) {Resource.textures[name].image.onload = Resource.onTextureLoad(name);};for (let name in Resource.sounds) {Resource.sounds[name].audio.onload = Resource.onSoundLoad(name);};};static _cleanUpParallelCache() {let i = 0;for (i = 0; i < Object.keys(Resource._parallelCache).length; i++) {let resourceId = Object.keys(Resource._parallelCache)[i];let resource = Resource._parallelCache[resourceId];if (resource instanceof Sound && resourceId.includes("i")) {if (resource.audio.currentTime == resource.audio.duration) {resource.destroy();delete Resource._parallelCache[resourceId];i--;};continue;let stringTime = resource.audio.currentTime + "";let stringArr = stringTime.split(".");if (stringArr.length < 2) continue;let precision = stringArr[1].length;if (precision < 4) {resource.destroy();delete Resource._parallelCache[resourceId];i--;continue;};};};};static eraseParallelCache() {for (let name in Resource._parallelCache) {let resource = Resource._parallelCache[name];resource.destroy();delete Resource._parallelCache[name];};};static update() {Resource._cleanUpParallelCache();for (let name in Resource._parallelCache) {Resource._parallelCache[name].update();};};};class Texture extends BaseResource {image;flipV = false;flipH = false;cropData = {};animData = {};#onAnimationEnd = null;get isAnimated() {return this.animData && this.animData instanceof Object && Object.keys(this.animData).length != 0;};get isCropped() {return this.cropData && this.cropData instanceof Object && Object.keys(this.cropData).length != 0;};set onAnimationEnd(callback) {if (typeof callback != "function") throw Error(`<callback> Must be a callable!`);this.#onAnimationEnd = callback;};get onAnimationEnd() {return this.#onAnimationEnd ?? null;};constructor(resourceId, continer = Resource._parallelCache) {let textureData = Resource.getTexture(resourceId);if ("mapData" in textureData) throw Error(`(${resourceId}) Texture is a tilemap!`);if (!("image" in textureData)) throw Error(`(${resourceId}) Texture is missing the image data!`);super(resourceId);this.image = textureData.image.cloneNode(true);if ("cropData" in textureData) this.cropData = structuredClone(textureData.cropData);if ("animData" in textureData) this.animData = structuredClone(textureData.animData);if (continer != null) continer[this.uid] = this;};getAnimationLength(inSeconds = false) {if (!this.isAnimated) return null;if (inSeconds) {return this.animData.frameLength * this.animData.length;} else {return this.animData.frameLength * this.animData.length * 1000;};};pause() {if (!this.isAnimated) return;this.animData.playing = false;};resume() {if (!this.isAnimated) return;this.animData.playing = true;};restart() {if (!this.isAnimated) return;this.animData.currentFrame = this.animData.direction > 0 ? 0 : this.animData.length - 1;this.animData.lastUpdate = 0;this.animData.playing = true;};render(x, y, width, height, rotation = 0, margin = 0) {if (this.isAnimated && this.isCropped) {let cropData = structuredClone(this.cropData);if (this.animData.wrap == 0) {cropData.x += this.animData.currentFrame * cropData.width;} else {cropData.x += (this.animData.currentFrame % this.animData.wrap) * cropData.width;cropData.y += Math.floor(this.animData.currentFrame / this.animData.wrap) * cropData.height;};this.#drawImageRotated(x,y, [cropData.x,cropData.y, cropData.width,cropData.height], width,height, rotation, margin);} else if (this.isCropped) {this.#drawImageRotated(x,y, [this.cropData.x,this.cropData.y, this.cropData.width,this.cropData.height], width,height, rotation, margin);} else {this.#drawImageRotated(x,y, [], width,height, rotation, margin);};};#drawImageRotated(x, y, cropData = [], width, height, rotation = 0, margin = 0) {let imageCropData = cropData;if (cropData.length == 0) {imageCropData = [0, 0, this.image.width, this.image.height, ];};if (cropData.length == 2) {imageCropData = [cropData[0], cropData[1], this.image.width, this.image.height, ];};let imageWidth = width ?? imageCropData[2];let imageHeight = height ?? imageCropData[3];let imageRenderData = [-imageWidth/2 + margin/2, -imageHeight/2 + margin/2, imageWidth - margin, imageHeight - margin, ];if (this.flipV) {imageRenderData[0] += imageRenderData[2];imageRenderData[2] *= -1;};ctx.save();ctx.setTransform(1, 0, 0, 1, x, y);ctx.rotate(rotation * (Math.PI / 180));ctx.translate(imageWidth / 2, imageHeight / 2);ctx.imageSmoothingEnabled = !c.isPixelPerfect;ctx.drawImage(this.image, ...imageCropData, ...imageRenderData);ctx.restore();};update() {if (!this.isAnimated) return;if (!this.animData.playing) return;let frameInMillis = this.animData.frameLength * 1000;let lastUpdateTime = time.elapsed - this.animData.lastUpdate;if (lastUpdateTime < frameInMillis) return;this.animData.lastUpdate = time.elapsed;this.animData.currentFrame += this.animData.direction;if (this.animData.direction > 0) {if (this.animData.currentFrame >= this.animData.length) {if (this.animData.mode == "loop") this.animData.currentFrame = 0;if (this.animData.mode == "stop") this.animData.currentFrame = this.animData.length - 1;if (this.animData.mode == "reset") this.animData.currentFrame = 0;if (["stop", "reset"].includes(this.animData.mode)) this.animData.playing = false;if (this.animData.mode == "pingpong") {this.animData.currentFrame = this.animData.length - 2;this.animData.direction *= -1;};if (this.animData.callback != null) this.animData.callback(this);};} else {if (this.animData.currentFrame < 0) { if (this.animData.mode == "loop") this.animData.currentFrame = this.animData.length - 1;if (this.animData.mode == "stop") this.animData.currentFrame = 0;if (this.animData.mode == "reset") this.animData.currentFrame = this.animData.length - 1;if (["stop", "reset"].includes(this.animData.mode)) this.animData.playing = false;if (this.animData.mode == "pingpong") {this.animData.currentFrame = 1;this.animData.direction *= -1;};if (this.animData.callback != null) this.animData.callback(this);};};};destroy() {this.disabled = true;};};class TileMap {uid = "";disabled = false;texture;bitmap;constructor(textureId, bitmapId) {this.texture = new Texture(textureId);this.bitmap = new Texture(bitmapId);this.sliceTilemaps();};sliceTilemaps() {for (let name in textures) {if (!("mapData" in textures[name])) continue;let map = textures[name].mapData;let bitmapImage = textures[map.bitmapName].image;console.log("Slicing tilemap:", name);console.log("Bitmap:", bitmapImage, bitmapImage.width, bitmapImage.height);let bitmapC = document.createElement("canvas");let bitmapCtx = bitmapC.getContext("2d");bitmapC.width = map.width * 3;bitmapC.height = map.height * 3;bitmapCtx.drawImage(bitmapImage, 0,0, bitmapC.width, bitmapC.height);for (let y = 0; y < map.height; y++) {for (let x = 0; x < map.width; x++) {let tileC = document.createElement("canvas");let tileCtx = tileC.getContext("2d");tileC.width = 3;tileC.height = 3;tileCtx.drawImage(bitmapC, x*3,y*3, 3,3, 0,0, 3,3);let tileData = tileCtx.getImageData(0,0, 3,3);tileData = tileData.data.filter((a, index) => index % 4 == 0);if (!tileData.includes(255)) continue;let neighbours = [tileData[0], tileData[1], tileData[2], tileData[5], tileData[8], tileData[7], tileData[6], tileData[3], ];neighbours = neighbours.map((a) => a == 0 ? 0 : 1);textures[name].mapData.tiles.push({connections: neighbours.join(''),cropX: x * map.tileWidth,cropY: y * map.tileHeight,});};};};};drawTileByConnections(name, connections, x, y, width = 16, height = 16, rotation = 0, margin = 0) {if (!(name in textures)) return;if (!("mapData" in textures[name])) return;let map = textures[name].mapData;let connectionString = connections.join('');if (map.tiles.length == 0) throw new Error(`No tiles found in tilemap '${name}'`);let tileIndex = 0;for (let i = 0; i < map.tiles.length; i++) {let tile = map.tiles[i];if (tile.connections == connectionString) {tileIndex = i;break;};};let tileData = textures[name].mapData.tiles[tileIndex];let cropData = [tileData.cropX, tileData.cropY, map.tileWidth, map.tileHeight];drawImageRotated(textures[name].image, x,y, cropData, width,height, rotation, margin);};update() {};destroy() {this.disabled = true;};};class Sound extends BaseResource {audio;playData = {};effectData = {};#onSoundEnd = null;#container;get isPlayable() {return this.playData != {};};set volume(value) {this.playData.volume = value;this.update();};get volume() {return this.playData.volume;};constructor(resourceId, isInstance = false, continer = Resource._parallelCache) {if (!settings.enableAudio) return false;let soundData = Resource.getSound(resourceId);if (!("audio" in soundData)) throw Error(`(${resourceId}) Sound is missing the audio data!`);super(isInstance ? resourceId + "_i" : resourceId);this.audio = soundData.audio.cloneNode(true);if ("playData" in soundData) {this.playData = {duration: soundData.playData.duration,loopCount: soundData.playData.loopCount,volume: soundData.playData.volume,currentLoop: soundData.playData.currentLoop,};this.effectData.track = _audioCtx.createMediaElementSource(this.audio);this.effectData.gain = _audioCtx.createGain();this.effectData.track.connect(this.effectData.gain).connect(_audioCtx.destination);this.effectData.gain.gain.value = clamp( (this.playData.volume ?? 1) / 100, 0, Infinity);};this.audio.play();this.#container = continer;if (continer != null) continer[this.uid] = this;};pause() {this.audio.pause();};resume() {this.audio.play();};restart(interrupt = false) {if (interrupt) {this.audio.stop();this.audio.currentTime = 0;this.audio.play();return null;} else {let newSound = new Sound(this.resourceId, true, this.#container);return newSound;};};update() {this.playData.duration = this.audio.duration;this.effectData.gain.gain.value = Math.max(0, (this.playData.volume ?? 1) / 100);};destroy() {this.audio.pause();this.disabled = true;};};class FileResource {static getText(fileId) {let fileData = Resource.getFile(fileId);return fileData.blob.text();};static async getJson(fileId) {let fileData = Resource.getFile(fileId);try {return JSON.parse(await fileData.blob.text());} catch (e) {throw Error(`(${fileId}) File does not contain valid JSON data!\n[${e}]`);};};static getSize(fileId) {let fileData = Resource.getFile(fileId);return fileData.metaData.size;};static getType(fileId) {let fileData = Resource.getFile(fileId);return fileData.metaData.type;};}class SceneManager {};class Scene {id = "";disabled = false;objects = {cameras: [],static: [],dynamic: [],};constructor(id) {};update() {this.objects.static.forEach(o => {if ("update" in o) o.update();});this.objects.dynamic.forEach(o => {if ("update" in o) o.update();});this.objects.cameras.forEach(c => {c.update();});};render() {this.objects.static.forEach(o => {if ("render" in o) o.render();});this.objects.dynamic.forEach(o => {if ("render" in o) o.render();});};}class SimpleSprite extends Object2D {color = "#dd00dd";texture = null;constructor(textureId, position, size = new Vector(32), color = "#dd00dd") {super(position, size);if (textureId != null) this.texture = new Texture(textureId);this.color = color;};get left() {return Math.min(this.pos.x, this.pos.x + this.size.x);};get right() {return Math.max(this.pos.x, this.pos.x + this.size.x);};get top() {return Math.min(this.pos.y, this.pos.y + this.size.y);};get bottom() {return Math.max(this.pos.y, this.pos.y + this.size.y);};get center() {return this.pos.add(this.size.mult(0.5));};get centerOffset() {return this.size.mult(0.5);};renderColor() {ctx.save();ctx.translate(-this.center.x, -this.center.y);ctx.rotate(this.rotation);ctx.fillStyle = "#000000";ctx.beginPath();ctx.fillRect(...camera.w2cXY(this.pos.x, this.pos.y), ...camera.w2csXY(this.size.x, this.size.y));ctx.fill();ctx.fillStyle = this.color;ctx.beginPath();ctx.moveTo(...camera.w2cXY(this.right, this.top));ctx.lineTo(...camera.w2cXY(this.right, this.center.y));ctx.lineTo(...camera.w2cXY(this.left, this.center.y));ctx.lineTo(...camera.w2cXY(this.left, this.bottom));ctx.lineTo(...camera.w2cXY(this.center.x, this.bottom));ctx.lineTo(...camera.w2cXY(this.center.x, this.top));ctx.closePath();ctx.fill();ctx.restore();};render() {camera.render(this.texture, this.pos.x, this.pos.y, this.size.x, this.size.y);};};class Sprite extends SimpleSprite {scale = new Vector();origin = new Vector();rotation = 0;constructor(textureId, position, size = new Vector(32), color = "#dd00dd") {super(textureId, position, size, color);this.scale = new Vector(1);this.origin = new Vector();};setOrigin(x, y) {this.origin = new Vector(clamp(x, 0, this.size.x), clamp(y, 0, this.size.y));};get transformOrigin() {return this.pos.add(new Vector(this.origin.x * (1 - this.scale.x), this.origin.y * (1 - this.scale.y)));};get left() {return this.scale.x < 0 ? this.transformOrigin.x + this.size.x*this.scale.x : this.transformOrigin.x;};get leftOffset() {return this.scale.x < 0 ? 0 : this.size.x * this.scale.x;};get right() {return this.scale.x < 0 ? this.transformOrigin.x : this.transformOrigin.x + this.size.x*this.scale.x;};get rightOffset() {return this.scale.x > 0 ? 0 : this.size.x * this.scale.x;};get top() {return this.scale.y < 0 ? this.transformOrigin.y + this.size.y*this.scale.y : this.transformOrigin.y;};get topOffset() {return this.scale.y < 0 ? 0 : this.size.y * this.scale.y;};get bottom() {return this.scale.y < 0 ? this.transformOrigin.y : this.transformOrigin.y + this.size.y*this.scale.y;};get bottomOffset() {return this.scale.y > 0 ? 0 : this.size.y * this.scale.y;};get center() {return this.pos.add(this.size.mult(this.scale).mult(0.5));};get centerOffset() {return (this.size).mult(this.scale).mult(0.5);};renderColor() {ctx.save();ctx.translate(-this.center.x, -this.center.y);ctx.rotate(this.rotation);ctx.fillStyle = "#000000";ctx.beginPath();ctx.fillRect(...camera.w2cXY(this.left, this.top), ...camera.w2csXY(this.rightOffset, this.bottomOffset));ctx.fill();ctx.fillStyle = this.color;ctx.beginPath();ctx.moveTo(...camera.w2cXY(this.right, this.top));ctx.lineTo(...camera.w2cXY(this.right, this.center.y));ctx.lineTo(...camera.w2cXY(this.left, this.center.y));ctx.lineTo(...camera.w2cXY(this.left, this.bottom));ctx.lineTo(...camera.w2cXY(this.center.x, this.bottom));ctx.lineTo(...camera.w2cXY(this.center.x, this.top));ctx.closePath();ctx.fill();ctx.restore();};render() {let newSize = this.size.copy();newSize.x *= this.scale.x;newSize.y *= this.scale.y;let newPos = this.pos.copy();if (this.scale.x < 0) newPos.x -= newSize.x;if (this.scale.y < 0) newPos.y -= newSize.y;this.texture.flipV = this.scale.x < 0;this.texture.flipH = this.scale.y < 0;camera.renderTexture(this.texture, ...newPos.toArray(), ...newSize.toArray(), this.rotation);};};class AnimatedSprite extends Sprite {animations = {};currentAnimation = null;defaultAnimation = "";constructor(position, size = new Vector(32), animations = {}, color = "#dd00dd") {super(null, position, size, color);this.animations = animations;this.defaultAnimation = Object.keys(this.animations)[0];this.currentAnimation = this.defaultAnimation;};setDefualtAnimation(animaionId) {this.defaultAnimation = animaionId;};play(animationId, animate = true) {this.currentAnimation = animationId;if (!animate) {this.animations[this.currentAnimation].pause();};};restart(animaionId) {this.play(animaionId);this.animations[this.currentAnimation].restart();};resume() {this.animations[this.currentAnimation].resume();};pause() {this.animations[this.currentAnimation].pause();};default() {this.play(this.defaultAnimation);};update() {this.texture = this.animations[this.currentAnimation];};}